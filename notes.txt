Rich Internet Applications (RIA)
RIA using HTML + CSS + JS => SPA (Single Page Application)

SPA + HTML5 Features => PWA (Progressing Web Application)

jQuery function


1. Separation Of Concerns (Single Responsibility Principle - (SRP))

ES6 (ESNext, ECMAScript 6)
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. Default arguments
10. Arrow functions
11. Template strings
12. Classes

https://es6-features.org/

TypeScript
    Typescript = JavaScript + Type Safety

public static class Calculator{
    public static int add(int x, int y){
        return x + y;
    }
}


function add(x, y){
    return x + y;
}

add(10,20)
add(10, '20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20],[30,[40,50]])
add([10,20],[30,['40',50]])
add([10,20],[30,['abc',50]])
add(function(){ return [10,20]; }, function(){ return [30,['abc',50]]; })
add([function(){ return [10,20]; }, function(){ return [30,['abc',50]]; }])
add(10)
add()
add(10,20,30,40,50)

function add(x,y){
    if ( typef x !== 'number' || typef y !== 'number')
        throw new Error('Invalid argument(s)!');
    return x + y;
}

function add(...args){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add(...n);
        return isNaN(n) ? 0 : parseInt(n);
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1));
}


let x : number = 10;
function add(x : number, y : number) : number {
    return x + y;
}

add('abc',100)

    |
    | 
    V
    tsc
    |
    |
    V

let x = 10;
function add(x, y) {
    return x + y;
}

https://typescriptlang.org


Building Blocks of Angular
    1. Component
        A resuable UI object
        Encapsulates Presentation + UI Behavior + State
            Presentation - How the data is displayed
            UI Behavior - What need to happen when the user interact with the app
            State - data
        Components can be composed to create complex UI
        Application = composition of components

    2. Directive
        Low level DOM manipulation
            showing DOM nodes
            removing DOM nodes
            conditional display of DOM notes
            adding / removing CSS classes to DOM nodes
            manipulating styles for a DOM node
        Attribute Directive
            manipulates the attributes of existing DOM nodes
            DOESN'T change the structure of the DOM tree
                Means that it doesnt add/remove DOM nodes
            is wrapped in []
        Structural Directive
            CHANGES the structure of the DOM tree by adding new DOM nodes or removing existing DOM nodes
            prefixed with a *

    3. Pipe
        Used to transform the data for presentation purposes
        Offer performance advantage

    4. Service
        Non UI logic of the application
        Services are singleton within a module (by default)

    5. Module
        Organize the other building blocks
        Registry of application entities
        Dependency Injection is taken care
        Minimum of 1 module should be there
        Application initialization starts with a module


Angular CLI
To install
    [sudo] npm install @angular/cli -g

To create a new application
    ng new first-app

ES6 Modules
    Everything defined in a JS/TS file is considered private
    Public entities have to explicitly exported
    Public entities from other JS/TS files have to explicitly imported to use them


Added :
    src/app/greeter
        greeter.component.ts
        greeter.component.html
        greeter.component.css

updated :
    src/app
        app.module.ts

    index.html

$event
    - event argument passed to the event handler
    - contains information about the event
        ex, which key is pressed (in a keyboard event)
            x,y coordinates where the mouse is clicked (in a mouse event)

    - 'target' attribute - has the reference to the dom node that triggered the event


ng new bug-tracker-app

pure functions
    functions with no side effects
    the output doesnt change for the given inputs
    the function invocation can be replaced with the 
        result of the function without affecting the outcome

function add(x,y){
    return x + y;
}

memoization
    memorizing the result of a function



function addClient(){
    var result = add(10,20);
    console.log('result = ', result);
}

function memoize(fn){
    const cache = {};
    return function(...args){
        const key = JSON.stringify(args);
        if (!cache.hasOwnProperty(key))
            cache[key] = fn(...args);
        return cache[key];
    }
}

function memoize(fn){
    let oldKey = undefined,
        oldResult = undefined;
    return function(...args){
        const key = JSON.stringify(args);
        if (key !== oldKey){
            oldKey = key;
            oldResult = fn(...args);
        }
        return oldResult;
    }

}


localStorage is a storage api in the browser
window.localStorage
====================
    - key/value store
    - key has to be unique
    - key & value must be strings
        use JSON.stringify & JSON.parse for serialization & deserialization
    - ~10 MB storage limit per origin 
    - Same Origin Policy
    - apis
    -------
        * setItem(key, value)
        * getItem(key) => value
        * removeItem(key)
        * clear()
        * key(index) => key @ index
        * length => number of items in the storage

State Change
    1. User Interaction
    2. Timer events
    3. XHR events (AJAX)

Model View Synchronization
    - Whenever the model is changing the view is AUTOMATICALLY updated accordingly


json-server
    A npm module designed to expose the data in a JSON file as restful services

Asynchronous Programming
    
    Asynchronous Operation
        An operation that you initiate but dont wait for its completion

    1. callbacks
    2. events (EventEmitter)
    3. promises
    4. async await
    5. ES6 generators
    
    6. observables


Observable 
    Observable is an inverse of Enumrable (generators)
        Enumerable = iterator + lazy evaluation

Iterator
    Design Pattern
    To iterate over a collection

var nos = [3,5,2,1,4]

for(var idx = 0, count = nos.length; idx < count; idx++){
    var no = nos[idx]
}


3000 resumes
30 developers
300 candidates

1. min of 5 years
2. engineering graduate
3. from bangalore


function filterExperiance(resumes[3000]){
    let result = [];
    for(let resume of resumes){
        if (resume.exp === '5 years')
            result.push(resume);
    }
    return result;
}

function * filterEngGraduates(fiveYrsExpGraduatesGen){
    var gen = fiveYrsExpGraduatesGen();
    var result = gen.next();
    while(!result.done ){
        yield result;
        result = gen.next();
    }
}

Enumerable = collection that already has the data
Observable = collection that WILL GET the data in future one after another across a time line
    = Events

rx.net (reactive extensions)
    = apis that allows you to process events like data

map
reduce
forEach
filter

Routing
Route
    encapsulates the URL and the respective component
    routegaurd
        canActivate


Deployment
    1. Typescript compilation
    2. minification of JS
    3. uglification of JS
    4. bundle the JS
    5. version the JS 
    6. JS file references to be updated in the index.html
    7. minification of CSS
    8. bundle the CSS
    9. version the CSS
    10. updated the CSS reference in the index.html
    11. copy the generated files to the build folder

    webpack (bundler)

command 
ng build --prod
